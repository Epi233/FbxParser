#include <fbxsdk.h>
#include <iostream>

bool LoadScene(
    FbxManager* pSdkManager,  // Use this memory manager...
    FbxScene* pScene,            // to import into this scene
    const char* pFilename         // the data from this file.
)
{
    int lFileMajor, lFileMinor, lFileRevision;
    int lSDKMajor, lSDKMinor, lSDKRevision;
    int i, lAnimStackCount;
    bool lStatus;
    char lPassword[1024];

    auto pIoSetting = pSdkManager->GetIOSettings();

    // Get the version number of the FBX files generated by the
    // version of FBX SDK that you are using.
    FbxManager::GetFileFormatVersion(lSDKMajor, lSDKMinor, lSDKRevision);

    // Create an importer.
    FbxImporter* lImporter = FbxImporter::Create(pSdkManager, "");

    // Initialize the importer by providing a filename.
    const bool lImportStatus = lImporter->Initialize(pFilename, -1, pSdkManager->GetIOSettings());

    // Get the version number of the FBX file format.
    lImporter->GetFileVersion(lFileMajor, lFileMinor, lFileRevision);

    if (!lImportStatus)  // Problem with the file to be imported
    {
        FbxString error = lImporter->GetStatus().GetErrorString();
        printf("Call to FbxImporter::Initialize() failed.\n");
        printf("Error returned: %s \n", error.Buffer());

        if (lImporter->GetStatus().GetCode() == FbxStatus::eInvalidFileVersion)
        {
            printf("FBX version number for this FBX SDK is %d.%d.%d \n", lSDKMajor, lSDKMinor, lSDKRevision);
            printf("FBX version number for file %s is %d.%d.%d \n", pFilename, lFileMajor, lFileMinor, lFileRevision);
        }

        return false;
    }

    printf("FBX version number for this FBX SDK is %d.%d.%d \n", lSDKMajor, lSDKMinor, lSDKRevision);

    if (lImporter->IsFBX())
    {
        printf("FBX version number for file %s is %d.%d.%d \n", pFilename, lFileMajor, lFileMinor, lFileRevision);

        // In FBX, a scene can have one or more "animation stack". An animation stack is a
        // container for animation data.
        // You can access a file's animation stack information without
        // the overhead of loading the entire file into the scene.

        printf("Animation Stack Information");

        lAnimStackCount = lImporter->GetAnimStackCount();

        printf("    Number of animation stacks: %d", lAnimStackCount);
        printf("    Active animation stack: \"%s\"",
            lImporter->GetActiveAnimStackName().Buffer());

        for (i = 0; i < lAnimStackCount; i++)
        {
            FbxTakeInfo* lTakeInfo = lImporter->GetTakeInfo(i);

            printf("    Animation Stack %d", i);
            printf("         Name: \"%s\"", lTakeInfo->mName.Buffer());
            printf("         Description: \"%s\"",
                lTakeInfo->mDescription.Buffer());

            // Change the value of the import name if the animation stack should
            // be imported under a different name.
            printf("         Import Name: \"%s\"", lTakeInfo->mImportName.Buffer());

            // Set the value of the import state to false
            // if the animation stack should be not be imported.
            printf("         Import State: %s", lTakeInfo->mSelect ? "true" : "false");
        }

        // Import options determine what kind of data is to be imported.
        // The default is true, but here we set the options explictly

        pIoSetting->SetBoolProp(IMP_FBX_MATERIAL, true);
        pIoSetting->SetBoolProp(IMP_FBX_TEXTURE, true);
        pIoSetting->SetBoolProp(IMP_FBX_LINK, true);
        pIoSetting->SetBoolProp(IMP_FBX_SHAPE, true);
        pIoSetting->SetBoolProp(IMP_FBX_GOBO, true);
        pIoSetting->SetBoolProp(IMP_FBX_ANIMATION, true);
        pIoSetting->SetBoolProp(IMP_FBX_GLOBAL_SETTINGS, true);
    }

    // Import the scene.
    lStatus = lImporter->Import(pScene);

    // The import file may have a password
    if (lStatus == false && lImporter->GetStatus().GetCode() == FbxStatus::ePasswordError)
    {
        printf("Please enter password: \n");

        lPassword[0] = '\0';

        FBXSDK_CRT_SECURE_NO_WARNING_BEGIN
            scanf("%s", lPassword);
        FBXSDK_CRT_SECURE_NO_WARNING_END
            FbxString lString(lPassword);

        pIoSetting->SetStringProp(IMP_FBX_PASSWORD, lString);
        pIoSetting->SetBoolProp(IMP_FBX_PASSWORD_ENABLE, true);


        lStatus = lImporter->Import(pScene);

        if (lStatus == false && lImporter->GetStatus().GetCode() == FbxStatus::ePasswordError)
        {
            printf("Incorrect password: file not imported. \n");
        }
    }

    // Destroy the importer
    lImporter->Destroy();

    return lStatus;
}


int main()
{
    FbxManager* pFbxManager = FbxManager::Create();

    // create an IOSettings object
    FbxIOSettings* ios = FbxIOSettings::Create(pFbxManager, IOSROOT);
    pFbxManager->SetIOSettings(ios);

    // Create a scene
    FbxScene* pFbxScene = FbxScene::Create(pFbxManager, "");

    // Load the scene.
    bool bLoadSceneSuccess = LoadScene(pFbxManager, pFbxScene, "D:\\Fork\\FbxParser\\FbxParser\\sadface.fbx");
    if (!bLoadSceneSuccess)
    {
        printf("------- Import failed ------------------------- \n");
        // Destroy the scene
        pFbxScene->Destroy();
        return 0;
    }

    // destroy the scene
    pFbxScene->Destroy();

	return 0;
}

